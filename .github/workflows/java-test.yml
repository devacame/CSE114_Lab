name: Java Code Test

on:
  push:
    paths:
      - "src/**"
      - "input/**"
      - "expected/**"
  pull_request:
    paths:
      - "src/**"
      - "input/**"
      - "expected/**"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 23
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "23"

      - name: Identify modified files
        id: diff-check
        run: |
          # Get a list of modified files in src, input, and expected directories
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt

          # Extract changed Java files (if any)
          grep "^src/.*\.java$" changed_files.txt | sed 's/src\/\(.*\)\.java/\1/' > changed_java.txt

          # Extract changed input files
          grep "^input/.*\.txt$" changed_files.txt | sed 's/input\/\(.*\)\.txt/\1/' >> changed_java.txt

          # Extract changed expected files
          grep "^expected/.*_expected\.txt$" changed_files.txt | sed 's/expected\/\(.*\)_expected\.txt/\1/' >> changed_java.txt

          # Remove duplicates to ensure each program only runs once
          sort -u changed_java.txt > unique_changed_java.txt

      - name: Check for existence of corresponding files
        run: |
          # Create a list to track programs with missing files
          touch missing_files.txt

          # Check if each Java file has a corresponding input and expected file
          for base in $(cat unique_changed_java.txt); do
            input_file="input/$base.txt"
            expected_file="expected/${base}_expected.txt"
            java_file="src/${base}.java"

            # If any of the files are missing, log it
            if [[ ! -f "$input_file" ]]; then
              echo "$input_file is missing" >> missing_files.txt
            fi
            if [[ ! -f "$expected_file" ]]; then
              echo "$expected_file is missing" >> missing_files.txt
            fi
            if [[ ! -f "$java_file" ]]; then
              echo "$java_file is missing" >> missing_files.txt
            fi
          done

          # If missing_files.txt is not empty, fail the build
          if [[ -s missing_files.txt ]]; then
            echo "The following files are missing:"
            cat missing_files.txt
            exit 1
          else
            echo "All required files are present."
          fi

      - name: Compile all Java files
        run: |
          javac src/*.java

      - name: Run tests for unique changed programs
        run: |
          # Loop through all unique changed Java programs
          for base in $(cat unique_changed_java.txt); do
            input_file="input/$base.txt"
            expected_file="expected/${base}_expected.txt"
            java_file="src/${base}.java"
            
            echo "Running test for $base"
            java -cp src "$base" < "$input_file" > output.txt
            diff -u output.txt "$expected_file"
          done
